--- a/net/minecraft/entity/mob/PiglinBrain.java
+++ b/net/minecraft/entity/mob/PiglinBrain.java
@@ -106,43 +106,43 @@
    }
 
    private static void addCoreActivities(Brain<PiglinEntity> piglin) {
-      piglin.setTaskList(Activity.CORE, 0, ImmutableList.of(new LookAroundTask(45, 90), new WanderAroundTask(), new OpenDoorsTask(), method_30090(), makeGoToZombifiedPiglinTask(), new RemoveOffHandItemTask(), new AdmireItemTask(120), new DefeatTargetTask(300, PiglinBrain::method_29276), new ForgetAngryAtTargetTask()));
+      piglin.setTaskList(Activity.CORE, 0, ImmutableList.of(new LookAroundTask(45, 90), new WanderAroundTask(), new OpenDoorsTask(), method_30090(), makeGoToZombifiedPiglinTask(), new RemoveOffHandItemTask<>(), new AdmireItemTask<>(120), new DefeatTargetTask(300, PiglinBrain::method_29276), new ForgetAngryAtTargetTask<>()));
    }
 
    private static void addIdleActivities(Brain<PiglinEntity> piglin) {
-      piglin.setTaskList(Activity.IDLE, 10, ImmutableList.of(new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 14.0F), new UpdateAttackTargetTask(AbstractPiglinEntity::isAdult, PiglinBrain::getPreferredTarget), new ConditionalTask(PiglinEntity::canHunt, new HuntHoglinTask()), makeGoToSoulFireTask(), makeRememberRideableHoglinTask(), makeRandomFollowTask(), makeRandomWanderTask(), new FindInteractionTargetTask(EntityType.PLAYER, 4)));
+      piglin.setTaskList(Activity.IDLE, 10, ImmutableList.of(new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 14.0F), new UpdateAttackTargetTask<>(AbstractPiglinEntity::isAdult, PiglinBrain::getPreferredTarget), new ConditionalTask<>(PiglinEntity::canHunt, new HuntHoglinTask<>()), makeGoToSoulFireTask(), makeRememberRideableHoglinTask(), makeRandomFollowTask(), makeRandomWanderTask(), new FindInteractionTargetTask(EntityType.PLAYER, 4)));
    }
 
    private static void addFightActivities(PiglinEntity piglin, Brain<PiglinEntity> brain) {
-      brain.setTaskList(Activity.FIGHT, 10, ImmutableList.of(new ForgetAttackTargetTask((livingEntity) -> {
+      brain.setTaskList(Activity.FIGHT, 10, ImmutableList.of(new ForgetAttackTargetTask<>((livingEntity) -> {
          return !isPreferredAttackTarget(piglin, livingEntity);
-      }), new ConditionalTask(PiglinBrain::isHoldingCrossbow, new AttackTask(5, 0.75F)), new RangedApproachTask(1.0F), new MeleeAttackTask(20), new CrossbowAttackTask(), new HuntFinishTask(), new ForgetTask(PiglinBrain::getNearestZombifiedPiglin, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
+      }), new ConditionalTask<>(PiglinBrain::isHoldingCrossbow, new AttackTask<>(5, 0.75F)), new RangedApproachTask(1.0F), new MeleeAttackTask(20), new CrossbowAttackTask<>(), new HuntFinishTask<>(), new ForgetTask<>(PiglinBrain::getNearestZombifiedPiglin, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
    }
 
    private static void addCelebrateActivities(Brain<PiglinEntity> brain) {
-      brain.setTaskList(Activity.CELEBRATE, 10, ImmutableList.of(makeGoToSoulFireTask(), new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 14.0F), new UpdateAttackTargetTask(AbstractPiglinEntity::isAdult, PiglinBrain::getPreferredTarget), new ConditionalTask((piglinEntity) -> {
+      brain.setTaskList(Activity.CELEBRATE, 10, ImmutableList.of(makeGoToSoulFireTask(), new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 14.0F), new UpdateAttackTargetTask<>(AbstractPiglinEntity::isAdult, PiglinBrain::getPreferredTarget), new ConditionalTask<>((piglinEntity) -> {
          return !piglinEntity.isDancing();
-      }, new GoToCelebrateTask(2, 1.0F)), new ConditionalTask(PiglinEntity::isDancing, new GoToCelebrateTask(4, 0.6F)), new RandomTask(ImmutableList.of(Pair.of(new FollowMobTask(EntityType.PIGLIN, 8.0F), 1), Pair.of(new StrollTask(0.6F, 2, 1), 1), Pair.of(new WaitTask(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION);
+      }, new GoToCelebrateTask<>(2, 1.0F)), new ConditionalTask<>(PiglinEntity::isDancing, new GoToCelebrateTask<>(4, 0.6F)), new RandomTask<>(ImmutableList.of(Pair.of(new FollowMobTask(EntityType.PIGLIN, 8.0F), 1), Pair.of(new StrollTask(0.6F, 2, 1), 1), Pair.of(new WaitTask(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION);
    }
 
    private static void addAdmireItemActivities(Brain<PiglinEntity> brain) {
-      brain.setTaskList(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new WalkToNearestVisibleWantedItemTask(PiglinBrain::doesNotHaveGoldInOffHand, 1.0F, true, 9), new WantNewItemTask(9), new AdmireItemTimeLimitTask(200, 200)), MemoryModuleType.ADMIRING_ITEM);
+      brain.setTaskList(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new WalkToNearestVisibleWantedItemTask<>(PiglinBrain::doesNotHaveGoldInOffHand, 1.0F, true, 9), new WantNewItemTask<>(9), new AdmireItemTimeLimitTask<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
    }
 
    private static void addAvoidActivities(Brain<PiglinEntity> brain) {
-      brain.setTaskList(Activity.AVOID, 10, ImmutableList.of(GoToRememberedPositionTask.toEntity(MemoryModuleType.AVOID_TARGET, 1.0F, 12, true), makeRandomFollowTask(), makeRandomWanderTask(), new ForgetTask(PiglinBrain::shouldRunAwayFromHoglins, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET);
+      brain.setTaskList(Activity.AVOID, 10, ImmutableList.of(GoToRememberedPositionTask.toEntity(MemoryModuleType.AVOID_TARGET, 1.0F, 12, true), makeRandomFollowTask(), makeRandomWanderTask(), new ForgetTask<>(PiglinBrain::shouldRunAwayFromHoglins, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET);
    }
 
    private static void addRideActivities(Brain<PiglinEntity> brain) {
-      brain.setTaskList(Activity.RIDE, 10, ImmutableList.of(new StartRidingTask(0.8F), new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 8.0F), new ConditionalTask(Entity::hasVehicle, makeRandomFollowTask()), new RidingTask(8, PiglinBrain::canRide)), MemoryModuleType.RIDE_TARGET);
+      brain.setTaskList(Activity.RIDE, 10, ImmutableList.of(new StartRidingTask<>(0.8F), new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 8.0F), new ConditionalTask<>(Entity::hasVehicle, makeRandomFollowTask()), new RidingTask<>(8, PiglinBrain::canRide)), MemoryModuleType.RIDE_TARGET);
    }
 
    private static RandomTask<PiglinEntity> makeRandomFollowTask() {
-      return new RandomTask(ImmutableList.of(Pair.of(new FollowMobTask(EntityType.PLAYER, 8.0F), 1), Pair.of(new FollowMobTask(EntityType.PIGLIN, 8.0F), 1), Pair.of(new FollowMobTask(8.0F), 1), Pair.of(new WaitTask(30, 60), 1)));
+      return new RandomTask<>(ImmutableList.of(Pair.of(new FollowMobTask(EntityType.PLAYER, 8.0F), 1), Pair.of(new FollowMobTask(EntityType.PIGLIN, 8.0F), 1), Pair.of(new FollowMobTask(8.0F), 1), Pair.of(new WaitTask(30, 60), 1)));
    }
 
    private static RandomTask<PiglinEntity> makeRandomWanderTask() {
-      return new RandomTask(ImmutableList.of(Pair.of(new StrollTask(0.6F), 2), Pair.of(FindEntityTask.create(EntityType.PIGLIN, 8, MemoryModuleType.INTERACTION_TARGET, 0.6F, 2), 2), Pair.of(new ConditionalTask(PiglinBrain::canWander, new GoTowardsLookTarget(0.6F, 3)), 2), Pair.of(new WaitTask(30, 60), 1)));
+      return new RandomTask<>(ImmutableList.of(Pair.of(new StrollTask(0.6F), 2), Pair.of(FindEntityTask.create(EntityType.PIGLIN, 8, MemoryModuleType.INTERACTION_TARGET, 0.6F, 2), 2), Pair.of(new ConditionalTask<>(PiglinBrain::canWander, new GoTowardsLookTarget(0.6F, 3)), 2), Pair.of(new WaitTask(30, 60), 1)));
    }
 
    private static GoToRememberedPositionTask<BlockPos> makeGoToSoulFireTask() {
@@ -150,18 +150,18 @@
    }
 
    private static MemoryTransferTask<PiglinEntity, LivingEntity> method_30090() {
-      return new MemoryTransferTask(PiglinEntity::isBaby, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.AVOID_TARGET, field_25698);
+      return new MemoryTransferTask<>(PiglinEntity::isBaby, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.AVOID_TARGET, field_25698);
    }
 
    private static MemoryTransferTask<PiglinEntity, LivingEntity> makeGoToZombifiedPiglinTask() {
-      return new MemoryTransferTask(PiglinBrain::getNearestZombifiedPiglin, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.AVOID_TARGET, field_25384);
+      return new MemoryTransferTask<>(PiglinBrain::getNearestZombifiedPiglin, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.AVOID_TARGET, field_25384);
    }
 
    protected static void tickActivities(PiglinEntity piglin) {
       Brain<PiglinEntity> brain = piglin.getBrain();
-      Activity activity = (Activity)brain.getFirstPossibleNonCoreActivity().orElse((Object)null);
+      Activity activity = (Activity)brain.getFirstPossibleNonCoreActivity().orElse(null);
       brain.resetPossibleActivities((List)ImmutableList.of(Activity.ADMIRE_ITEM, Activity.FIGHT, Activity.AVOID, Activity.CELEBRATE, Activity.RIDE, Activity.IDLE));
-      Activity activity2 = (Activity)brain.getFirstPossibleNonCoreActivity().orElse((Object)null);
+      Activity activity2 = (Activity)brain.getFirstPossibleNonCoreActivity().orElse(null);
       if (activity != activity2) {
          method_30091(piglin).ifPresent(piglin::playSound);
       }
@@ -550,7 +550,7 @@
    }
 
    private static TimeLimitedTask<PiglinEntity> makeRememberRideableHoglinTask() {
-      return new TimeLimitedTask(new MemoryTransferTask(PiglinEntity::isBaby, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.RIDE_TARGET, RIDE_TARGET_MEMORY_DURATION), MEMORY_TRANSFER_TASK_DURATION);
+      return new TimeLimitedTask<>(new MemoryTransferTask<>(PiglinEntity::isBaby, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.RIDE_TARGET, RIDE_TARGET_MEMORY_DURATION), MEMORY_TRANSFER_TASK_DURATION);
    }
 
    protected static void angerAtCloserTargets(AbstractPiglinEntity piglin, LivingEntity target) {
@@ -760,3 +760,5 @@
       FOOD = ImmutableSet.of(Items.PORKCHOP, Items.COOKED_PORKCHOP);
    }
 }
+
+// Fukkit Marker
