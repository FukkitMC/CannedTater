--- a/net/minecraft/entity/ai/brain/task/LookTargetUtil.java
+++ b/net/minecraft/entity/ai/brain/task/LookTargetUtil.java
@@ -55,25 +55,24 @@
    }
 
    public static void lookAt(LivingEntity entity, LivingEntity target) {
-      entity.getBrain().remember(MemoryModuleType.LOOK_TARGET, (Object)(new EntityLookTarget(target, true)));
+      entity.getBrain().remember(MemoryModuleType.LOOK_TARGET, (new EntityLookTarget(target, true)));
    }
 
    private static void walkTowardsEachOther(LivingEntity first, LivingEntity second, float speed) {
-      int i = true;
       walkTowards(first, (Entity)second, speed, 2);
       walkTowards(second, (Entity)first, speed, 2);
    }
 
    public static void walkTowards(LivingEntity entity, Entity target, float speed, int completionRange) {
       WalkTarget walkTarget = new WalkTarget(new EntityLookTarget(target, false), speed, completionRange);
-      entity.getBrain().remember(MemoryModuleType.LOOK_TARGET, (Object)(new EntityLookTarget(target, true)));
-      entity.getBrain().remember(MemoryModuleType.WALK_TARGET, (Object)walkTarget);
+      entity.getBrain().remember(MemoryModuleType.LOOK_TARGET, (new EntityLookTarget(target, true)));
+      entity.getBrain().remember(MemoryModuleType.WALK_TARGET, walkTarget);
    }
 
    public static void walkTowards(LivingEntity entity, BlockPos target, float speed, int completionRange) {
       WalkTarget walkTarget = new WalkTarget(new BlockPosLookTarget(target), speed, completionRange);
-      entity.getBrain().remember(MemoryModuleType.LOOK_TARGET, (Object)(new BlockPosLookTarget(target)));
-      entity.getBrain().remember(MemoryModuleType.WALK_TARGET, (Object)walkTarget);
+      entity.getBrain().remember(MemoryModuleType.LOOK_TARGET, (new BlockPosLookTarget(target)));
+      entity.getBrain().remember(MemoryModuleType.WALK_TARGET, walkTarget);
    }
 
    public static void give(LivingEntity entity, ItemStack stack, Vec3d targetLocation) {
@@ -162,3 +161,5 @@
       }).orElseGet(Stream::empty);
    }
 }
+
+// Fukkit Marker
