--- a/net/minecraft/world/GameRules.java
+++ b/net/minecraft/world/GameRules.java
@@ -138,7 +138,7 @@
    }
 
    public <T extends GameRules.Rule<T>> T get(GameRules.Key<T> key) {
-      return (GameRules.Rule)this.rules.get(key);
+      return (T) this.rules.get(key);
    }
 
    public CompoundTag toNbt() {
@@ -173,8 +173,8 @@
    }
 
    private static <T extends GameRules.Rule<T>> void accept(GameRules.Visitor consumer, GameRules.Key<?> key, GameRules.Type<?> type) {
-      consumer.visit(key, type);
-      type.accept(consumer, key);
+      consumer.visit((Key<T>) key, (Type<T>) type);
+      type.accept(consumer, (Key) key);
    }
 
    @Environment(EnvType.CLIENT)
@@ -214,7 +214,7 @@
       RANDOM_TICK_SPEED = register("randomTickSpeed", GameRules.Category.UPDATES, GameRules.IntRule.create(3));
       SEND_COMMAND_FEEDBACK = register("sendCommandFeedback", GameRules.Category.CHAT, GameRules.BooleanRule.create(true));
       REDUCED_DEBUG_INFO = register("reducedDebugInfo", GameRules.Category.MISC, GameRules.BooleanRule.create(false, (server, rule) -> {
-         byte b = rule.get() ? 22 : 23;
+         int b = rule.get() ? 22 : 23;
          Iterator var3 = server.getPlayerManager().getPlayerList().iterator();
 
          while(var3.hasNext()) {
@@ -255,7 +255,7 @@
       private boolean value;
 
       private static GameRules.Type<GameRules.BooleanRule> create(boolean initialValue, BiConsumer<MinecraftServer, GameRules.BooleanRule> changeCallback) {
-         return new GameRules.Type(BoolArgumentType::bool, (type) -> {
+         return new GameRules.Type<>(BoolArgumentType::bool, (type) -> {
             return new GameRules.BooleanRule(type, initialValue);
          }, changeCallback, GameRules.Visitor::visitBoolean);
       }
@@ -314,7 +314,7 @@
       private int value;
 
       private static GameRules.Type<GameRules.IntRule> create(int initialValue, BiConsumer<MinecraftServer, GameRules.IntRule> changeCallback) {
-         return new GameRules.Type(IntegerArgumentType::integer, (type) -> {
+         return new GameRules.Type<>(IntegerArgumentType::integer, (type) -> {
             return new GameRules.IntRule(type, initialValue);
          }, changeCallback, GameRules.Visitor::visitInt);
       }
@@ -446,7 +446,7 @@
       }
 
       public T createRule() {
-         return (GameRules.Rule)this.ruleFactory.apply(this);
+         return (T) this.ruleFactory.apply(this);
       }
 
       public void accept(GameRules.Visitor consumer, GameRules.Key<T> key) {
@@ -547,3 +547,5 @@
       }
    }
 }
+
+// Fukkit Marker
