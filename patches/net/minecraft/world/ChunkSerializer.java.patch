--- a/net/minecraft/world/ChunkSerializer.java
+++ b/net/minecraft/world/ChunkSerializer.java
@@ -121,7 +121,7 @@
             tickScheduler3 = chunkTickScheduler2;
          }
 
-         chunk = new WorldChunk(world.toServerWorld(), pos, biomeArray, upgradeData, tickScheduler, tickScheduler3, l, chunkSections, (chunk) -> writeEntities(compoundTag, chunk));
+         chunk = new WorldChunk(world.toServerWorld(), pos, biomeArray, upgradeData, tickScheduler, tickScheduler3, l, chunkSections, (chunk2) -> writeEntities(compoundTag, chunk2));
       } else {
          ProtoChunk protoChunk = new ProtoChunk(pos, upgradeData, chunkSections, chunkTickScheduler, chunkTickScheduler2);
          protoChunk.setBiomes(biomeArray);
@@ -233,7 +233,7 @@
 
       for(int i = -1; i < 17; ++i) {
          int j = i;
-         ChunkSection chunkSection = (ChunkSection)Arrays.stream(chunkSections).filter((chunkSection) -> chunkSection != null && chunkSection.getYOffset() >> 4 == j).findFirst().orElse(WorldChunk.EMPTY_SECTION);
+         ChunkSection chunkSection = (ChunkSection)Arrays.stream(chunkSections).filter((chunkSection2) -> chunkSection2 != null && chunkSection2.getYOffset() >> 4 == j).findFirst().orElse(WorldChunk.EMPTY_SECTION);
          ChunkNibbleArray chunkNibbleArray = lightingProvider.get(LightType.BLOCK).getLightSection(ChunkSectionPos.from(chunkPos, j));
          ChunkNibbleArray chunkNibbleArray2 = lightingProvider.get(LightType.SKY).getLightSection(ChunkSectionPos.from(chunkPos, j));
          if (chunkSection != WorldChunk.EMPTY_SECTION || chunkNibbleArray != null || chunkNibbleArray2 != null) {
@@ -458,3 +458,5 @@
       return listTag;
    }
 }
+
+// Fukkit Marker
