--- a/net/minecraft/server/world/ServerWorld.java
+++ b/net/minecraft/server/world/ServerWorld.java
@@ -11,6 +11,7 @@
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
@@ -425,7 +426,7 @@
    }
 
    private void wakeSleepingPlayers() {
-      ((List)this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((player) -> player.wakeUp(false, false));
+      (this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((player) -> player.wakeUp(false, false));
    }
 
    public void tickChunk(WorldChunk chunk, int randomTickSpeed) {
@@ -859,7 +860,7 @@
 
    public void unloadEntities(WorldChunk chunk) {
       this.unloadedBlockEntities.addAll(chunk.getBlockEntities().values());
-      TypeFilterableList[] var2 = chunk.getEntitySectionArray();
+      TypeFilterableList<Entity>[] var2 = chunk.getEntitySectionArray();
       int var3 = var2.length;
 
       for(int var4 = 0; var4 < var3; ++var4) {
@@ -1248,10 +1249,8 @@
 
    public void dump(Path path) throws IOException {
       ThreadedAnvilChunkStorage threadedAnvilChunkStorage = this.getChunkManager().threadedAnvilChunkStorage;
-      Writer writer = Files.newBufferedWriter(path.resolve("stats.txt"));
-      Throwable path2 = null;
 
-      try {
+      try (Writer writer = Files.newBufferedWriter(path.resolve("stats.txt"))) {
          writer.write(String.format("spawning_chunks: %d\n", threadedAnvilChunkStorage.getTicketManager().getSpawningChunkCount()));
          SpawnHelper.Info info = this.getChunkManager().getSpawnInfo();
          if (info != null) {
@@ -1269,49 +1268,15 @@
          writer.write(String.format("fluid_ticks: %d\n", this.getFluidTickScheduler().getTicks()));
          writer.write("distance_manager: " + threadedAnvilChunkStorage.getTicketManager().toDumpString() + "\n");
          writer.write(String.format("pending_tasks: %d\n", this.getChunkManager().getPendingTasks()));
-      } catch (Throwable var121) {
-         path2 = var121;
-         throw var121;
-      } finally {
-         if (writer != null) {
-            if (path2 != null) {
-               try {
-                  writer.close();
-               } catch (Throwable var112) {
-                  path2.addSuppressed(var112);
                }
-            } else {
-               writer.close();
-            }
-         }
 
-      }
-
       CrashReport crashReport = new CrashReport("Level dump", new Exception("dummy"));
       this.addDetailsToCrashReport(crashReport);
-      Writer writer2 = Files.newBufferedWriter(path.resolve("example_crash.txt"));
-      Throwable var126 = null;
 
-      try {
+      try (Writer writer2 = Files.newBufferedWriter(path.resolve("example_crash.txt"))) {
          writer2.write(crashReport.asString());
-      } catch (Throwable var116) {
-         var126 = var116;
-         throw var116;
-      } finally {
-         if (writer2 != null) {
-            if (var126 != null) {
-               try {
-                  writer2.close();
-               } catch (Throwable var111) {
-                  var126.addSuppressed(var111);
                }
-            } else {
-               writer2.close();
-            }
-         }
 
-      }
-
       Path path2 = path.resolve("chunks.csv");
       Writer writer3 = Files.newBufferedWriter(path2);
       Throwable var129 = null;
@@ -1462,7 +1427,7 @@
             object2IntOpenHashMap.addTo(identifier, 1);
          }
 
-         return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry::getIntValue).reversed()).limit(5L).map((entry) -> entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
+         return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.<Object2IntMap.Entry<Identifier>, Integer>comparing(Object2IntMap.Entry::getIntValue).reversed()).limit(5L).map((entry) -> entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
       } catch (Exception var6) {
          return "";
       }
@@ -1477,3 +1442,5 @@
       BlockPos.iterate(i - 2, j, k - 2, i + 2, j, k + 2).forEach((blockPosx) -> world.setBlockState(blockPosx, Blocks.OBSIDIAN.getDefaultState()));
    }
 }
+
+// Fukkit Marker
